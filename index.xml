<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Engineering Thoughts</title>
    <link>https://dathan.github.io/blog/</link>
    <description>Recent content on Engineering Thoughts</description>
    <image>
      <url>https://dathan.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://dathan.github.io/blog/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Oct 2025 10:00:00 -0700</lastBuildDate><atom:link href="https://dathan.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RAS 2026: A Comparative Analysis of Cloud Providers for AI Workloads</title>
      <link>https://dathan.github.io/blog/posts/ras-2026-comparative-analysis/</link>
      <pubDate>Wed, 22 Oct 2025 10:00:00 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/ras-2026-comparative-analysis/</guid>
      <description>Introduction As artificial intelligence continues to reshape industries, the underlying infrastructure powering these innovations is more critical than ever. For AI workloads, especially large-scale training and inference, the trifecta of Reliability, Availability, and Serviceability (RAS) is paramount. These three pillars determine the robustness, uptime, and maintainability of a system, directly impacting the performance and cost-effectiveness of AI applications.
In this post, we&amp;rsquo;ll explore the RAS landscape in 2026, comparing two distinct categories of cloud providers: the specialized clouds (Crusoe, Nimbix, CoreWeave) and the hyperscalers (AWS, GCP, Azure).</description>
    </item>
    
    <item>
      <title>Debugging Slow Nodes in an InfiniBand Network</title>
      <link>https://dathan.github.io/blog/posts/debugging-slow-nodes-in-an-infiniband-network/</link>
      <pubDate>Thu, 16 Oct 2025 17:01:25 +0000</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/debugging-slow-nodes-in-an-infiniband-network/</guid>
      <description>In the world of High-Performance Computing (HPC), an InfiniBand network is the backbone that ties together numerous nodes to work in concert. The performance of the entire cluster is predicated on each node and connection operating at its peak. However, a single underperforming node can create a bottleneck, drastically slowing down the entire fabric. This post will explore a systematic approach to identifying, isolating, and repairing these slow nodes using a binary search algorithm and NCCL (NVIDIA Collective Communications Library) benchmarks.</description>
    </item>
    
    <item>
      <title>The Steps for Gemini Client to Upload This Blog Post From a Single Prompt</title>
      <link>https://dathan.github.io/blog/posts/the-steps-for-gemini-client-to-upload-this-blog-post-from-a-single-prompt/</link>
      <pubDate>Sun, 13 Jul 2025 18:26:12 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/the-steps-for-gemini-client-to-upload-this-blog-post-from-a-single-prompt/</guid>
      <description>In the world of content creation and management, automation is key. This very blog post is a testament to the power of AI and automation, as it was generated and published by Google&amp;rsquo;s Gemini in response to a single prompt. Here&amp;rsquo;s a look at the steps involved in this process:
1. The Prompt It all started with a simple instruction: &amp;ldquo;in blog create a new hugo markdown file matching the title of the article with a dash between words.</description>
    </item>
    
    <item>
      <title>Unlocking Simplicity: Embedding Executables in Go for Robust Deployments</title>
      <link>https://dathan.github.io/blog/posts/embed-executables-inside-go-programs/</link>
      <pubDate>Tue, 08 Jul 2025 17:45:00 -0500</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/embed-executables-inside-go-programs/</guid>
      <description>As a Director of Engineering, I&amp;rsquo;m always looking for ways to simplify our development and deployment processes. The more we can reduce external dependencies and streamline our tooling, the more reliable and maintainable our systems become. One of the most elegant solutions I&amp;rsquo;ve seen for this challenge comes from the Go ecosystem: embedding executables directly inside a Go binary.
This technique is a game-changer for building self-contained applications. Imagine deploying a single, static binary that contains not only your core application but also all the necessary command-line tools or other executables it depends on.</description>
    </item>
    
    <item>
      <title>Harnessing Rituals for Uniterrupted Uptime</title>
      <link>https://dathan.github.io/blog/posts/harnessing-rituals-for-uniterrupted-uptime/</link>
      <pubDate>Tue, 08 Aug 2023 07:19:41 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/harnessing-rituals-for-uniterrupted-uptime/</guid>
      <description>Introduction In the ever-evolving landscape of site reliability engineering (SRE), ensuring the highest levels of uptime is the ultimate goal. Behind the scenes, a symphony of processes and practices come together to achieve this, and at the heart of it all are the rituals that we, as a large SRE team, follow with unwavering dedication. In this blog post, we&amp;rsquo;ll dive deep into the rituals that shape our approach to maintaining uptime, shedding light on how these practices contribute to a resilient system and empowered team.</description>
    </item>
    
    <item>
      <title>Focus by Answering What Problem Are We Solving</title>
      <link>https://dathan.github.io/blog/posts/focus-by-answering-what-problem-are-we-solving/</link>
      <pubDate>Wed, 12 Jul 2023 15:13:44 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/focus-by-answering-what-problem-are-we-solving/</guid>
      <description>Problem One of the most effective ways that has helped me focus is answering the question, &amp;ldquo;What problem are we solving?&amp;rdquo;. For this post, the problem that I am solving is how to communicate this idea to readers so they too can focus on what to solve.
When there are 100 things to fix, what do you fix? One of the better articles that I read about focusing on a problem https://jasonfeifer.</description>
    </item>
    
    <item>
      <title>Engineering Methods Based on Fictional Characters</title>
      <link>https://dathan.github.io/blog/posts/engineering-methods-based-on-fictional-characters/</link>
      <pubDate>Tue, 30 May 2023 15:49:07 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/engineering-methods-based-on-fictional-characters/</guid>
      <description>Problem What are effective strategies for an engineer to communicate with their peers and answer their inquiries efficiently?
Solution Appeal to your fellow engineers through shared cultural touchstones, like the well-known characters from science fiction that most engineers are familiar with.
Case: Time Estimation in Software Engineering Every software engineer inevitably has to provide an estimate for when a code block, task, or project will be completed. Defining what &amp;ldquo;done&amp;rdquo; means can be complex.</description>
    </item>
    
    <item>
      <title>Postmortem of a 2005 Flickr Outage Modernized for Today</title>
      <link>https://dathan.github.io/blog/posts/postmortem-of-a-2005-flickr-outage-modernized-for-today/</link>
      <pubDate>Wed, 26 Apr 2023 15:38:31 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/postmortem-of-a-2005-flickr-outage-modernized-for-today/</guid>
      <description>Review of Flickr Architecture Before we delve into the Postmortem let&amp;rsquo;s review the details of the database architecture and Flickr&amp;rsquo;s overall Architecture at that time. Flickr at that time was a PHP shop, running PHP 4, using Smarty as its template Engine in Apache running MODPHP. PHP was everyplace because it&amp;rsquo;s a great engine. I am sure that many hate this statement, that PHP is X or PHP is Y but in reality, it enabled Flickr to jump from a top 100 destination in the USA to a top 5 destination in less than 2 years.</description>
    </item>
    
    <item>
      <title>Using Playwright With Golang and Python to Grab Js Generated Csv</title>
      <link>https://dathan.github.io/blog/posts/using-playwright-with-golang-and-python-to-grab-js-generated-csv/</link>
      <pubDate>Tue, 25 Apr 2023 16:10:17 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/using-playwright-with-golang-and-python-to-grab-js-generated-csv/</guid>
      <description>Problem I am helping out a friend, to process reports which are behind a paywall and store them in a database to create a churn detector, which will enable his crew to address the churn at hand.
Details What is churn? Churn is a term used by companies to denote that a customer no longer wants to use the services they previously paid for. Each company has different metrics to give an indication that a customer is CHURING.</description>
    </item>
    
    <item>
      <title>Vector Embeddings</title>
      <link>https://dathan.github.io/blog/posts/vector-embeddings/</link>
      <pubDate>Tue, 04 Apr 2023 18:39:12 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/vector-embeddings/</guid>
      <description>What are Vector Embeddings Let&amp;rsquo;s go back to the number line. The distance between two points; This is a good example of what Vector Embeddings are, fingerprinting a document into a number in multi-dimensional space. Since a document can be represented as a number (series of numbers), now a relation can be made between two documents. The relation in terms of distance between two vectors (which could be a markdown document for instance), small distances have a high relatedness and large distances suggest a low relatedness.</description>
    </item>
    
    <item>
      <title>Chat with GPT-4 &amp; Save Prompts/Responses to Git</title>
      <link>https://dathan.github.io/blog/posts/chat-gpt-4-save-prompts-to-git/</link>
      <pubDate>Wed, 29 Mar 2023 21:42:15 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/chat-gpt-4-save-prompts-to-git/</guid>
      <description>Saw an ask on Twitter A person I follow on Twitter tweeted:
Is there a git/version control for prompts? I hate losing great prompts and I’d love to be able to iterate on them.
So I created a quick command line chat to GPT-4 https://github.com/dathan/go-openai-prompt-git-save
It is a go program, and you need an OPENAI Token and a GitHub User Token in your environment. The program is very simple. From the terminal, have a chat interface to OpenAi, and save the prompts asked, to GitHub, with the content from GPT-4&amp;rsquo;s response.</description>
    </item>
    
    <item>
      <title>Maximizing the Power of Language Models: Prompt Engineering</title>
      <link>https://dathan.github.io/blog/posts/maximizing-the-power-of-language-models/</link>
      <pubDate>Wed, 22 Mar 2023 14:34:34 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/maximizing-the-power-of-language-models/</guid>
      <description>What is Prompt Engineering Let&amp;rsquo;s ask chat gpt:
Response in text Prompt engineering is the practice of crafting effective prompts to generate specific outputs from language models like LLMs (Large Language Models). It involves selecting the appropriate vocabulary, formatting, and instructions to help the model understand the desired task and generate the desired output.
Effective prompts can improve the performance of LLMs in various natural language processing tasks, such as language translation, sentiment analysis, text summarization, and language generation.</description>
    </item>
    
    <item>
      <title>Journal Tasks Log 6</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-6/</link>
      <pubDate>Wed, 08 Mar 2023 13:20:33 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-6/</guid>
      <description>What problem am I trying to solve Extract content from a dailyco + deepgram session realtime
What am I trying to do to solve the probkem Display the transcription realtime
display the user and what they said display the avatar The avatar has a tooltip of the username make the body transparent and lighten up the boxes Summarize the transcription like a CNN key takeway of a speech.
buffer the messages, once the messages hit a threshold empty the buffer AI Summarize fill the display buffer What is the priority Display &amp;ndash;&amp;gt; 1d and will require big changes Summarize &amp;ndash;&amp;gt; 1d an minor changes What am I going to do scope this to development ✅ display the avatar ✅ on meeting join and isOwner start transcribing ✅ show the transcription button for clients ✅ Just finished the design buildingof a real-time transcription summary service for meetings.</description>
    </item>
    
    <item>
      <title>Mastering High-Performance Inital Loads: A Guide to Using Typescript, Next.js, Chakra UI, and Static Props for Seamless Web Development</title>
      <link>https://dathan.github.io/blog/posts/rendering-with-typescript-nextjs-chakra-ui-static-props/</link>
      <pubDate>Wed, 15 Feb 2023 11:02:09 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/rendering-with-typescript-nextjs-chakra-ui-static-props/</guid>
      <description>Motivation As an Engineer, I&amp;rsquo;m always on the lookout for new and exciting challenges. So when I was tasked with solving a rendering problem in a Typescript application, I jumped at the opportunity to learn and figure it out.
In this blog post, I&amp;rsquo;ll be sharing my experience and insights into rendering in a Typescript application within a Vercel environment, using Node 18+, Next.js, strict Eslint guidelines, and Chakra UI for custom components.</description>
    </item>
    
    <item>
      <title>Maximizing Web Based Sharing for Effective Previews Across Platforms</title>
      <link>https://dathan.github.io/blog/posts/maximizing-web-based-sharing-for-effective-previews-across-platforms/</link>
      <pubDate>Thu, 02 Feb 2023 10:02:44 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/maximizing-web-based-sharing-for-effective-previews-across-platforms/</guid>
      <description>Motivation I have been writing code to support sharing content from the web on various platforms since 2010. This is my attempt at recording all the things that I do to effectively share effective Previews across LinkedIn, Facebook, iMessage, Twitter, and any other Open Graph compatible system.
History The Open Graph protocol was first introduced in 2010 by Facebook. It was created as a way for website owners to better control how their pages were represented when shared on Facebook.</description>
    </item>
    
    <item>
      <title>Journal Tasks Log 5</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-5/</link>
      <pubDate>Mon, 19 Dec 2022 14:46:26 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-5/</guid>
      <description>Goal Record cloud video and transcribe it
Tasks Setup cloud storage endpoint ✅ Build a meeting token endpoint and pass that to the call creation ✅ enable recording - when the session owner joins ✅ add command line applications to the base &amp;ndash; not going to do will use cloud functions download file wrapper - not needed will create a signed url process file wrapper upload successful process wrapper update database state run command line from github doc the results and how to reproduce </description>
    </item>
    
    <item>
      <title>Journal Tasks Log 4</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-4/</link>
      <pubDate>Mon, 12 Dec 2022 13:21:48 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-4/</guid>
      <description>Integrate vendor package and give results remove API from the front end ✅ save? room and return the room id that is created ✅ creator makes rooms ✅ participants need to be a part of a session to join a room ✅ need an error layer ✅ verify session against joining a room ✅ fix the buttons to look like a poor man&amp;rsquo;s zoom in terms of layout ✅ Add speaker view to the layout add new button layout using their button scheme add code to add fake cells </description>
    </item>
    
    <item>
      <title>Hyper Delivery to Iterate for the Customer</title>
      <link>https://dathan.github.io/blog/posts/hyper-delivery-to-iterate-for-the-customer/</link>
      <pubDate>Tue, 29 Nov 2022 12:06:24 -0400</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/hyper-delivery-to-iterate-for-the-customer/</guid>
      <description>As software engineers, especially product engineering, one of our core objectives is to deliver software solutions to customers quickly, while still maintaining the quality of the product. It is not enough to simply produce a product and ship it out - we need to ensure that the product fits the customer’s needs, and can evolve to meet the customer’s changing demands. To achieve this, we need to establish a set of software delivery practices that prioritize speed and iteration to find product market fit.</description>
    </item>
    
    <item>
      <title>Openai Fine Tuning Notes</title>
      <link>https://dathan.github.io/blog/posts/openai-fine-tuning-notes/</link>
      <pubDate>Mon, 21 Nov 2022 10:06:01 -0400</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/openai-fine-tuning-notes/</guid>
      <description>OpenAI fine-tuning with a notebook in VSCode AI is the future. Co-pilot is the future. Building a finetuned layer for GPT-X will enable products to produce results faster, with less upfront effort for a fraction of the cost.
Setting up a training set Let&amp;rsquo;s assume for this post, is based on some structured data. That structured data has been tagged by a human, and there is a lot of it. Roughly 3 MB of data.</description>
    </item>
    
    <item>
      <title>Journal Tasks Log 3</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-3/</link>
      <pubDate>Fri, 11 Nov 2022 10:11:12 -0400</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-3/</guid>
      <description>Scope Learn how to fine tune a model
Tasks Go through an openai tutorial Take companies data and train a model Run through test cases Learn how to enable or disable finetuning to show improvements Learn how to fine tune a model Publish details via a post </description>
    </item>
    
    <item>
      <title>Notes About Gke Ingress Service Timeouts</title>
      <link>https://dathan.github.io/blog/posts/notes-about-gke-ingress-service-timeouts/</link>
      <pubDate>Wed, 02 Nov 2022 10:07:11 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/notes-about-gke-ingress-service-timeouts/</guid>
      <description>Problem GKE for all backend services has a default timeout of 30 seconds for a response from the backend or the service. If the request takes more than 30 seconds a 502 Bad Gateway occurs and the message
Error: Server Error The server encountered a temporary error and could not complete your request. Please try again in 30 seconds.
Context The problem is summarized as timeouts that need to be configured for the load balancer, but how do you do that?</description>
    </item>
    
    <item>
      <title>Journal Tasks Log 2</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-2/</link>
      <pubDate>Thu, 27 Oct 2022 13:03:32 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-2/</guid>
      <description>Scope Create an API endpoint using an unfriendly provider.
Tasks Use a headless browser to log in with google oAuth ✅ Pass the Text to summerize to application ✅ Grab response from unfriendly provider and structure the response into what we need for return. ✅ Create an API interface to enable this. First Steps Lets try to get the existing app to push text Then change the existing app to take text as an input Make sure to grab the response.</description>
    </item>
    
    <item>
      <title>Journal Tasks Log 1</title>
      <link>https://dathan.github.io/blog/posts/journal-tasks-log-1/</link>
      <pubDate>Fri, 21 Oct 2022 08:01:39 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/journal-tasks-log-1/</guid>
      <description>Why My quest is to become better continuously as a human, parent, husband, man, engineer, and person. Better does not mean perfect but know that there is growth and that you never truly stop learning. The current me is good enough, I just want to do things better instead of thinking I am doing them better and that requires tracking and measurement. This is my log of things needed to organize my thoughts and be more self-disciplined.</description>
    </item>
    
    <item>
      <title>Gcp Cloudsql Postgresql</title>
      <link>https://dathan.github.io/blog/posts/gcp-cloudsql-postgresql/</link>
      <pubDate>Wed, 12 Oct 2022 14:52:53 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/gcp-cloudsql-postgresql/</guid>
      <description>Google GCP CloudSQL PostgreSQL Administration I like to configure most of my infrastructure in Hashicorp terraform. The terraform was not developer friendly in my experience because it had a lot of prerequisites for defining the server config, instead of picking a class that just seems right. Building custom things allows for variance. Thus I built and am administering the CloudSQL artifacts through the desktop cloud SQL interface. So far so good.</description>
    </item>
    
    <item>
      <title>Understanding Jsonb Postgres</title>
      <link>https://dathan.github.io/blog/posts/understanding-jsonb-postgres/</link>
      <pubDate>Tue, 21 Jun 2022 18:17:27 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/understanding-jsonb-postgres/</guid>
      <description>I am running across how to debug data in PostgreSQL, a platform I am not familiar with. Specifically using JSONB_SET. JSONB_SET documentation is the following
jsonb_set ( target jsonb, path text[], new_value jsonb [, create_if_missing boolean ] ) → jsonb
Returns target with the item designated by path replaced by new_value, or with new_value added if create_if_missing is true (which is the default) and the item designated by path does not exist.</description>
    </item>
    
    <item>
      <title>Solidity Payable Ownership Contracts</title>
      <link>https://dathan.github.io/blog/posts/solidity-payable-ownership-contracts/</link>
      <pubDate>Mon, 17 Jan 2022 09:21:56 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/solidity-payable-ownership-contracts/</guid>
      <description>Building foreverawards.com, I have built a basic minter and it works well enough to move to the next level, charging for the service to mint an award that the wallerholder sends to their teammate.
Contracts When ever talking about charging, transfering, or components of, we are talking about Contracts, which is on v0.8 at the moment of writing this post in the soliditylang documentation site.
Visibility and Getters external, can be used in transactions from other contracts.</description>
    </item>
    
    <item>
      <title>Automatic Cert Rotation for Gke</title>
      <link>https://dathan.github.io/blog/posts/automatic-cert-rotation-gke/</link>
      <pubDate>Wed, 29 Dec 2021 09:17:19 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/automatic-cert-rotation-gke/</guid>
      <description>Why? My config setup is the following, a free-ish version of GKE autopilot, and a load balancer is my ingress. I want the load balancer to terminate TLS.
How Doing some web surfing I found this blog post and it&amp;rsquo;s literally
git clone https://github.com/GoogleCloudPlatform/gke-managed-certs cd gke-managed-certs kubectl apply -f managedcertificates-crd.yaml kubectl apply -f managed-certificates-controller.yaml then kubectl annotate ingress [your-ingress-name] networking.gke.io/managed-certificates=mydomain-certificate UPDATE GKE autopilot changes As of May 2021 GKE removed 3rd party admission webhooks, now you will need to use https://cloud.</description>
    </item>
    
    <item>
      <title>Launching Gke Autopilot</title>
      <link>https://dathan.github.io/blog/posts/launching-gke-autopilot/</link>
      <pubDate>Mon, 27 Dec 2021 12:33:06 -0800</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/launching-gke-autopilot/</guid>
      <description>I am going to launch foreveraward.com on Kubernetes because why not? I need something to manage the foreveraward container and I am good with Kubernetes.
The following checklist is going to be needed.
Cluster GKE (1st time building) Helm3 compatible Ingress controller to support the ingress to the react app Launching GKE cluster Creating a cluster Using gcloud the command-line tool for Google cloud, let&amp;rsquo;s create a cluster with redundancy in us-west-1</description>
    </item>
    
    <item>
      <title>Learning React</title>
      <link>https://dathan.github.io/blog/posts/learning-react/</link>
      <pubDate>Fri, 26 Nov 2021 14:07:37 -0400</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/learning-react/</guid>
      <description>I am attempting to build a dApp. The problem is I do not know modern javascript, nor solidity. I am learning to react as I build the product to ensure that I can hit my overall goal of building foreveraward.com
Import curly braces This question is asked on StackOverflow with a great answer
Specifically, if I have a statement with the following:
import { A } from &amp;#39;./A&amp;#39; This is a named import called A and only works if there is a named export called A</description>
    </item>
    
    <item>
      <title>Incident Management Process</title>
      <link>https://dathan.github.io/blog/posts/incident_management_process/</link>
      <pubDate>Tue, 26 Oct 2021 18:07:05 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/incident_management_process/</guid>
      <description>Incident Response Runbook This guide is meant to outline the process for running a common incident response. It ensures that we are working on the right problem, keeping all stakeholders informed, assigning focus roles, and discovering the root cause or at least mitigating the issue.
Incident Priorities P0 (Critical Incident) A P0 incident is a complete outage or a severe degradation that affects all customers and requires immediate attention.
P1 (Major Incident) A P1 incident refers to a customer-visible outage that interrupts the functionality or behavior of the platform.</description>
    </item>
    
    <item>
      <title>NFT IDEA to Customers with a Product built-in</title>
      <link>https://dathan.github.io/blog/posts/nft-idea-project/</link>
      <pubDate>Tue, 19 Oct 2021 11:58:09 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/nft-idea-project/</guid>
      <description>Problem An award given should be proveable even if that physical representation of the award was lost, yet if the physical object is lost did the award every really exist.
Solution NFT Having a way to represent ownership to digital content on the web is a very powerful feature. The decentralized nature of the blockchain or what I like to call very slow peer-to-peer databases gives that implicit trust that a smart contract was minted and cannot be changed, thus can represent ownership.</description>
    </item>
    
    <item>
      <title>Tailscale Kubernetes</title>
      <link>https://dathan.github.io/blog/posts/tailscale-kubernetes/</link>
      <pubDate>Wed, 13 Oct 2021 17:33:37 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/tailscale-kubernetes/</guid>
      <description>Last year I wrote a quick docker image and helm chart to install tailscale into your Kubernetes cluster. My particular use case was reaching devices between multiple colliding networks from the cloud to a physical location someplace around the world. Tailscale is perfect for this use-case, and putting together that project was fun and informative.
Today I read this post by Maisem Ali and Maya Kaczorowski. A fantastic combination of features and abilities that make reaching services in a Kubernetes cluster easy.</description>
    </item>
    
    <item>
      <title>Some Thoughts on Github Hugo</title>
      <link>https://dathan.github.io/blog/posts/some-thoughts-on-github-hugo/</link>
      <pubDate>Tue, 12 Oct 2021 18:11:46 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/some-thoughts-on-github-hugo/</guid>
      <description>GitHub pages is new for me and I was not aware that the contents of GitHub pages site can be based on branches and path combos. Using the GitHub action and reading the documentation, the action to build is on main. Main is the default branch. The action also executes hugo and publishes the hugo generated site to the root of the gh-pages branch. As a result, a silent step that was needed to automated this blog post.</description>
    </item>
    
    <item>
      <title>I want to write an informative log ...</title>
      <link>https://dathan.github.io/blog/posts/my-first-post/</link>
      <pubDate>Tue, 12 Oct 2021 16:48:51 -0700</pubDate>
      
      <guid>https://dathan.github.io/blog/posts/my-first-post/</guid>
      <description>In the past, I ran a blog at mysqldba.blogspot.com, but I started to move in different directions away from just the database layer but focused on truely the entire stack. I am doing much more than MySQL, but I still keep up to date and use it in my personal projects. Since I moved into the entire stack, I basically gave up my focus and to an extent my expertise in mySQL.</description>
    </item>
    
  </channel>
</rss>
